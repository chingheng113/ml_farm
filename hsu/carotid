from my_util import data_util, plot_util
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from keras.models import Sequential, Model
from keras.layers import Dense, Activation, Dropout, BatchNormalization
from keras.optimizers import sgd, adam
from keras.callbacks import EarlyStopping
from sklearn.metrics import confusion_matrix, classification_report


df = data_util.load_all('carotid_modified_1.csv')
id_all = df.index.values
x_data_all = df.iloc[:, 0:62]
y_data_all = df.iloc[:, 62:]
id_train, id_test, x_data_train, x_data_test, y_data_train, y_data_test = train_test_split(id_all, x_data_all, y_data_all, test_size=0.3)
x_data_train = data_util.scale(x_data_train)
x_data_test = data_util.scale(x_data_test)
nb_feartures = x_data_all.shape[1]
nb_classes = y_data_all.shape[1]

early_stop = EarlyStopping(monitor='val_loss', min_delta=0, patience=100, verbose=1, mode='auto')
callbacks_list = [early_stop]

model = Sequential()
model.add(Dense(50, input_dim=nb_feartures))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.add(Dense(30))
model.add(BatchNormalization())
model.add(Activation('sigmoid'))
model.add(Dense(nb_classes, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(x_data_train, y_data_train,
                    batch_size=64,
                    epochs=200,
                    shuffle=True,
                    validation_split=0.33,
                    callbacks=callbacks_list)
plot_util.plot_acc_loss(history, 'acc')
# https://www.depends-on-the-definition.com/guide-to-multi-label-classification-with-neural-networks/
loss, acc = model.evaluate(x_data_test, y_data_test)
y_pred = model.predict(x_data_test)
result = np.concatenate((id_test.reshape(-1, 1), y_data_test, y_pred), axis=1)
titles = ['id','RCCA','REICA','RIICA','RACA','RMCA','RPCA','REVA','RIVA','BA',
          'LCCA','LEICA','LIICA','LACA','LMCA','LPCA','LEVA','LIVA','RCCA_1',
          'REICA_1','RIICA_1','RACA_1','RMCA_1','RPCA_1','REVA_1','RIVA_1','BA_1',
          'LCCA_1','LEICA_1','LIICA_1','LACA_1','LMCA_1','LPCA_1','LEVA_1','LIVA_1']
result_df = pd.DataFrame(data=result, columns=titles)
data_util.save_dataframe_to_csv(result_df, 'see')
print(acc, loss)
print(y_pred)
